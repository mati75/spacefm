.TH spacefm-handlers 7 "May 2022"

.SH NAME
.B spacefm-handlers

.SH DESCRIPTION
TODO

.SH INTRODUCTION
Handlers are sets of commands which tell SpaceFM how to perform a function, such as
opening a file, mounting a device, or creating/extracting an archive. In some cases
your handlers replace SpaceFM's default behavior. Handlers come in several varieties:
Devices, Protocols, Archives, and Files.

Additional user-contributed handlers may also be found on the Plugins Wiki. If you
create a new handler, please consider exporting it and adding it to the wiki.

.SH DEVICES
Device handlers tell SpaceFM how to mount, unmount, and show properties for specific
filesystems or devices. Anytime SpaceFM or the SpaceFM daemon mounts or unmounts a
device (manually or automatically), or shows the properties of a device, it uses a
handler to determine what commands to run. By adding custom device handlers, SpaceFM
can be made to mount and unmount virtually any type of device or filesystem.

To configure device handlers, right-click in the Devices list and select
Settings|Device Handlers. The list at the left of the Device Handlers configuration
window lists all device handlers. (Enlarge this window to see the handler commands
more clearly.) Click on a handler's name to see its contents. The order of the list
is important: Starting from the top, the first handler which matches the current
device will be used. You can reorder the list by dragging entries, or using the Up & Down
buttons. In this way, you determine what handlers have preference. The "Default" handler
is usually listed last, and is used if no other handlers apply.

The right side of the window shows the selected handler's contents. If Enable Handler
is unchecked, this handler will never be used. The Name contains the common name for
the handler, which appears in the list and in debug messages. Next comes a Whitelist
and Blacklist: these determine when this handler will be used. Finally, the Mount,
Unmount, and Properties boxes contain scripted commands which will be run by the handler
to mount, unmount, or list properties of a device.

TIP: If you just want to change the mount program that SpaceFM uses to mount removable
drives (such as udevil, pmount, or udisks), open Device Handlers and click the Default
handler. Example Mount and Unmount commands are shown for each mount program. Just
enable the section you want to use by removing the appropriate comment marks (#).
Whitelist
A handler's whitelist is a space-separated list of elements. In general, if any
element in the list matches the device properties, then this handler may be used
for this device. If a list element is prefixed with a plus sign '+', that element is
required to match. Any element in the list may contain wildcards (an asterisk '*' to
represent multiple characters, or a question mark '?' to represent single characters).

The following device whitelist elements are recognized:

    FSTYPE (eg ext3)
    dev=DEVICE (/dev/sdd1)
    id=UDI
    label=VOLUME_LABEL (include spaces as underscores)
    point=MOUNT_POINT
    audiocd=0 or 1
    optical=0 or 1
    removable=0 or 1
    mountable=0 or 1

The simplest whitelist simply contains a filesystem type, such as "ext3". Thus anytime
you mount a device with that filesystem, the handler may be used.

If you want a handler to apply to several filesystem types, just list them:

    ext3 ext4

For more complex situations, you can add more elements to narrow or control when a
handler will be used. For example, consider the following whitelist:

    +ext3 +dev=/dev/sdd* +label=My_Volume_Label

First, the elements are prefixed with plug signs, so all are required to match, or
the handler will not be used. First, the filesystem type MUST be ext3 for this handler
to be used. Second, the device file must begin with "/dev/sdd" (eg /dev/sdd1). Finally,
the volume label on the device must be "My Volume Label" (or "My_Volume_Label"). Note
that spaces in the label are converted to underscores for testing.

To see what handler SpaceFM has selected to mount a device, and see the commands
being issued, start the spacefm program in a terminal window, and observe debugging
output in the terminal while SpaceFM is running. For example, mounting a USB stick
you may see:

    Selected Device Handler 'Default': MOUNT [*]

This tells you that the 'Default' device handler was used, and the action being performed
is MOUNT. The portion(s) of the handler's whitelist which matched will be enclosed in
square brackets [ ].

.SS Blacklist
A handler's blacklist is a space-separated list of elements. If any element in the
list matches the device properties, this handler will never be used for this device.

For example, consider the following Whitelist/Blacklist combination:

    Whitelist: vfat
    Blacklist: dev=/dev/sde1 label=Ignored_Volume_Label

In this example, the handler applies to any vfat filesystem. However, if the device
file is /dev/sde1, OR the volume label on the device is "Ignored Volume Label" (or
"Ignored_Volume_Label"), the handler will not be used.

.SS Mount
The Mount text box contains the commands which will be run if this handler is selected
to mount a device (manually or automatically). The commands are run as a bash script,
and may contain any valid bash syntax (version 4, or any greater version of bash you
have installed). If the Run In Terminal box is checked, the script will be run in
your configured terminal emulator window (which may allow the user to enter information).
If Run As Task is checked, the running command will be listed in the task manager and
error output will be shown in a popup. You can also edit the commands in your configured
editor by clicking on 'Edit' in the upper-right corner, or press Alt-Enter while the
cursor is in the box (remember to save the script in your editor when finished).

Several variables will be replaced before your commands are run:

    %v  device
    %o  volume-specific mount options (use in mount command only)
    %t  filesystem type being mounted (eg vfat)
    %a  create auto mount point

%v will be replaced with the device file (eg /dev/sdd1). %o, if included, will
be replaced with volume-specific mount options (these are set in Mount Options). Or,
you can omit %o and simply include the options you desire in the command.
Finally, the presence of %a will cause SpaceFM to create a new directory to be used as a
mount point for the mount (eg ~/.cache/spacefm/mountpoint), and %a will be replaced with
the directory path. When the device is unmounted, this mount point will be removed. Or,
if you wish to create your own mount point, or if your mount program automatically creates
one in /media (such as udevil), then you may omit %a.

In addition to the above variables, SpaceFM's exported bash variables may be used, as
well as the substitution variables defined in Command Line.

Example Mount commands (enable only one section by removing #):

    # # udevil:
    #     udevil mount -o '%o' %v
    #
    # # pmount: (does not accept mount options)
    #     pmount %v
    #
    # # udisks v2:
    #     udisksctl mount -b %v -o '%o'
    #
    # # udisks v1: (enable all three lines!)
    #     fm_udisks=`udisks --mount %v --mount-options '%o' 2>&1`
    #     echo "$fm_udisks"
    #     [[ "$fm_udisks" = "${fm_udisks/ount failed:/}" ]]

(Note: Because udisks v1 does not return a proper error status on error, the above
lines examine the output and set the exit status if appropriate, which triggers an
error popup in SpaceFM.)

If a handler's Mount command is empty (or contains only blank lines and comments),
that handler will not be used. If no handler is found with a non-empty Mount command,
SpaceFM will automatically attempt to use udevil, pmount, udisks2, or udisks1 to mount
the device (it will use whatever is installed, in this order of preference).

NOTE: Custom menu items, added with New|Command, may also be set as primitive device
handlers via their Use as handler for option. When a device is clicked, if the menu
item is enabled based on the current browser context, this menu item's command will be
run rather than any other configured device handler. In addition, device events may be
configured to trigger actions based on socket event evt_device.

.SS Unmount
The Unmount text box contains the commands which will be run if this handler is selected
to unmount a device (manually or automatically). The commands are run as a bash script,
and may contain any valid bash syntax (version 4, or any greater version of bash you have
installed). If the Run In Terminal box is checked, the script will be run in your
configured terminal emulator window. If Run As Task is checked, the running command
will be listed in the task manager and error output will be shown in a popup.

Several variables will be replaced before your commands are run:

    %v  device
    %a  current mount point

%v will be replaced with the device file (eg /dev/sdd1). %a will be replaced with the
directory which is the mount point of the device.

In addition to the above variables, SpaceFM's exported bash variables may be used, as
well as the substitution variables defined in Command Line.

Example Unmount commands (enable only one section by removing #):

    # # udevil:
    #     udevil umount %v
    #
    # # pmount:
    #     pumount %v
    #
    # # udisks v2:
    #     udisksctl unmount -b %v
    #
    # # udisks v1: (enable all three lines!)
    #     fm_udisks=`udisks --unmount %v 2>&1`
    #     echo "$fm_udisks"
    #     [[ "$fm_udisks" = "${fm_udisks/ount failed:/}" ]]

(Note: Because udisks v1 does not return a proper error status on error, the above
lines examine the output and set the exit status if appropriate, which triggers an
error popup in SpaceFM.)

If a handler's Unmount command is empty (or contains only blank lines and comments),
that handler will not be used. If no handler is found with a non-empty Unmount command,
SpaceFM will automatically attempt to use udevil, pmount, udisks2, or udisks1 to
unmount the device (it will use whatever is installed, in this order of preference).

.SS Properties
The Properties text box contains the commands which will be run if the user selects
Properties from the right-click menu of the devices list. This is used to show any
relevant properties and status of the device. If the Run In Terminal box is checked,
the script will be run in your configured terminal emulator window, otherwise the
output will be displayed in a SpaceFM popup window. If Run As Task is checked, the
running command will be listed in the task manager and error output will be shown
in a popup.

If no applicable device handler has a non-empty Properties command, SpaceFM's default
properties will be shown.

.SH Protocols
Protocol handlers tell SpaceFM how to respond when a URL is opened or unmounted, such
as mounting or unmounting a network filesystem, or showing properties for a mounted URL.
Anytime you enter a URL in SpaceFM's Path Bar (eg ftp://mirrors.kernel.org), open a
bookmark containing a URL, select Open URL from the file menu, or specify a URL on the
command-line, a handler is used to open the URL. This handler can run another program
(such as a web browser), can mount the URL as a filesystem, or take any other action
you specify.

To configure protocol handlers, right-click in the Path Bar and select Protocol Handlers,
or select Settings|Protocol Handlers from the Devices menu. Like Device Handlers, protocol
handlers have an Enable checkbox, a whitelist and blacklist which determine when the
handler is used, and command boxes.

.SS Whitelist
As with device handlers, a protocol handler's whitelist is a space-separated
list of elements. In general, if any element in the list matches the protocol
properties, then this handler may be used. If a list element is prefixed with a
plus sign '+', that element is required to match. Any element in the list may
contain wildcards (an asterisk '*' to represent multiple characters, or a question
mark '?' to represent single characters).

SpaceFM recognizes a path bar entry as a protocol if it has the form
PROTOCOL:// (such as ftp://). SpaceFM recommends a standard URL format regardless
of protocol. If the URL is in such a format, SpaceFM will break the URL into parts
and assign them to variables ready for your use. You can also use other URL formats
(eg those specific to a mount program), but SpaceFM may not correctly assign the
parts to variables.

The following protocol whitelist elements are recognized:

    PROTOCOL (eg ssh)
    url=URL (ssh://...)
    host=HOSTNAME
    user=USERNAME
    mtab_fs=FSTYPE      (mounted fs type as shown in mtab)
    mtab_url=URL        (mounted url as shown in mtab)
    point=MOUNT_POINT

For most protocols, the whitelist will be as simple as the protocol, such
as 'ftp' (meaning that this handler will be used to mount ftp:// URLs). For
other protocols, you might use a whitelist with additional elements. For example:

    ssh mtab_fs=fuse.sshfs

In this case, the handler is selected if the protocol is "ssh", which will work when
mounting an ssh filesystem. However, when fuse mounts the filesystem, it
uses "fuse.sshfs" as the filesystem type, which is listed in mtab (see the output
of the mount command). Thus this whitelist also includes "mtab_fs=fuse.sshfs", so
this handler will be used for that filesystem type in mtab. This will allow the
handler to be used for both mounting ssh URLs and unmounting fuse.sshfs filesystems.

Note: The whitelist mtab_fs= property also may affect what mounted protocols SpaceFM
detects and lists in its Devices list. By default, SpaceFM will list most
non-block (eg fuse) filesystems which are mounted to a user-readable directory. To
have it detect and list another filesystem in the devices list, add the type with
mtab_fs=FSTYPE to a protocol handler's whitelist. This will also ensure that your
protocol handler, rather than a device handler, is used to unmount and show properties
for the mounted protocol.

Note that some of the above fields, such as mtab_fs, mtab_url, and point, are only
set when performing an unmount. Also, any spaces in the values are replaced with
underscores before being tested.

To see what handler SpaceFM has selected to mount or unmount a URL, and see the
commands being issued, start the spacefm program in a terminal window, and observe
debugging output in the terminal while SpaceFM is running. For example, mounting and
unmounting an ssh URL you may see:

    Selected Protocol Handler 'ssh': MOUNT [ssh] mtab_fs=fuse.sshfs
    Selected Protocol Handler 'ssh': UNMOUNT ssh [mtab_fs=fuse.sshfs]

This tells you that the 'ssh' protocol handler was used for both MOUNT and UNMOUNT
actions. The whitelist of that handler is shown, and the portion(s) of the handler's
whitelist which matched are enclosed in square brackets [ ]. For mounting, the URL
was recognized with protocol ssh, which matched in the whitelist. For unmounting,
the mtab_fs matched the whitelist.

After your protocol is mounted, the mount directory may or may not automatically open
in SpaceFM (depending on whether SpaceFM can associate a new device with the protocol
just mounted based on mtab, mount point, etc.) If it does not open, you can open a
mount point after a successful mount command by adding a line such as:

    [[ $? -eq 0 ]] && spacefm -t "%a"

.SSBlacklist
As with device handlers, a protocol handler's blacklist is a space-separated list of
elements. If any element in the list matches the protocol properties, this handler
will never be used for this device.

.SS Mount
The Mount text box contains the commands which will be run if this handler is selected
to handle an entered URL. The commands are run as a bash script, and may contain any
valid bash syntax (version 4, or any greater version of bash you have installed). If
the Run In Terminal box is checked, the script will be run in your configured terminal
emulator window (which may allow the user to enter information, such as a password). If
Run As Task is checked, the running command will be listed in the task manager and error
output will be shown in a popup. You can also edit the commands in your configured editor
by clicking on 'Edit' in the upper-right corner, or press Alt-Enter while the cursor is
in the box (remember to save the script in your editor when finished).

Several variables will be replaced before your commands are run:

    %url%     $fm_url
    %proto%   $fm_url_proto
    %host%    $fm_url_host
    %port%    $fm_url_port
    %user%    $fm_url_user
    %pass%    $fm_url_pass
    %path%    $fm_url_path
    %a        auto create mount point

These variables will be replaced with the appropriate values taken from a standard URL, and
the bash equivalents may also be used (eg %url% is the same as $fm_url). In the case of %a,
its presence will cause SpaceFM to create a new directory to be used as a mount point for
the mount (eg ~/.cache/spacefm/mountpoint, and %a will be replaced with the directory path.
When the device is unmounted, this mount point will be removed. Or, if you wish to create
your own mount point, or if your mount program automatically creates one
in /media (such as udevil), then you may omit %a.

In addition to the above variables, SpaceFM's exported bash variables may be used, as
well as the substitution variables defined in Command Line.

Note that the Mount command does not need to be used to mount a protocol, it may simply
open the protocol with a program of your choice. For example, to open http:// URLs with
Firefox, put "http" in the handler's whitelist, and use this Mount command:

    firefox "%url%" &

The ampersand (&) tells bash to run the program and move on, without waiting for the
program to finish, which is usually appropriate when starting an application.

You can also open a website using a SpaceFM socket command, which will guess the user's web browser:

    spacefm socket run-task web "$fm_url"

If a handler's Mount command is empty (or contains only blank lines and comments),
that handler will not be used. If no handler is found with a non-empty Mount command,
SpaceFM will not handle the protocol, and will display an error to the user.

.SS Unmount
The Unmount text box contains the commands which will be run if this handler is selected
to unmount a mounted URL, generally a network filesystem such as sshfs.

Several variables will be replaced before your commands are run:

    %url%     $fm_url
    %proto%   $fm_url_proto
    %host%    $fm_url_host
    %port%    $fm_url_port
    %user%    $fm_url_user
    %path%    $fm_url_path
    %a        current mount point
    $fm_mtab_fs   (mounted fs type as shown mtab)
    $fm_mtab_url  (mounted url as shown mtab)

Not all of the variables may be filled-in, depending on the protocol.

If a protocol handler's Unmount command is empty (or contains only blank lines and
comments), that handler will not be used. If no handler is found with a non-empty
Unmount command, SpaceFM will not unmount the filesystem, and will display
an error to the user.

.SS Properties
The Properties text box contains the commands which will be run if the user selects
Properties from the right-click menu of the devices list. This is used to show any
relevant properties and status of a mounted protocol. If the Run In Terminal box is
checked, the script will be run in your configured terminal emulator window, otherwise
the output will be displayed in a SpaceFM popup window.

If no applicable protocol handler has a non-empty Properties command, SpaceFM's default
properties will be shown.

.SH Archives
SpaceFM includes a built-in facility for creating, extracting, and listing the contents
of archive files (such as tar.gz or zip files).

.SS Open Menu
SpaceFM's Open menu for archive files, accessed by right-clicking on any archive file,
allows you to choose Extract, Extract To, or List Contents. By default, choosing Extract
will extract the selected archive files to folders of the same name, choosing Extract To
will allow you to choose where to extract the files, or choosing List Contents will display
the contents of the archive file(s).

.SS Archive Defaults
With a default configuration, opening an archive file by double-clicking it in the file
list will automatically extract it to a folder of the same name. You can change how
SpaceFM opens archives by right-clicking on an archive file and using the Open|Archive
Defaults submenu:

.SS Open With App
Selecting Open With App will cause SpaceFM to open archive files using other methods. Even
if you have Open With App selected as the default behavior for opening archive files, you
can still manually choose Extract, Extract To, and List Contents from the Open menu to use
SpaceFM's built-in archive facility.

.SS Extract
Extract is the default behavior of SpaceFM. If selected, double-clicking on an archive in
the file list will automatically extract its contents to a folder.

.SS Extract To
The Extract To behavior is similar to Extract - it will extract the archive contents to
a folder - except that you will be able to choose the destination folder. Also, the
Extract To dialog includes Create Subfolder and Write Access options (see below).

.SS List Contents
If List Contents is selected, double-clicking on an archive file will open a terminal
window displaying the contents of the selected archive, but it will not be extracted.

In addition, the Archive Defaults submenu includes these options:

.SS Create Subfolder
If this option is selected, which is the default, then using Extract (manually or
automatically on open) will create a subfolder with the same name as the archive, and
will extract the contents to it. If this option is not selected, the archive contents
will be extracted to the current folder. (Note that the Extract To dialog also contains
a Create Subfolder option for that operation - that setting is remembered separately). Note
that with Create Subfolder disabled, some archive programs, such as tar , may overwrite
files in the current folder if they have the same name as files in the archive.

.SS Write Access
If this option is selected, after extraction the contents of the extraction folder will
be made write-accessible to the current user. This option is only available if the Create
Subfolder option is enabled, and if the user is not root. Because some archives (such as
tar.gz files made from CDROM) contain read-only files which then require an extra step to
delete, this convenience option ensures the user can delete and change the extracted files.

.SS Archive Handlers
Selecting Archive Handlers opens the Archive Handlers configuration window (see below).

.SS Archive Handlers
Archive handlers tell SpaceFM how to create, extract, and list the contents of various
kinds of archive files (eg tar.gz files). To configure archive handlers, right-click on
a known archive file and select Open|Archive Defaults|Archive Handlers. Or, right-click
on any file, select New|Archive, and click the Configure button.

The list at the left of the Archive Handlers configuration window lists all archive
handlers. (Enlarge this window to see the handler commands more clearly.) Click on a
handler's name to see its contents. The order of the list is important: Starting from
the top, the first handler which matches a file being extracted will be used. You can
reorder the list by dragging entries, or using the Up & Down buttons.

The right side of the window shows the selected handler's contents. If Enable Handler
is unchecked, this handler will never be used. The Name contains the common name for
the handler. Next come MIME Type and Pathname text boxes: these determine when this
handler will be used. Finally, the Compress, Extract, and List boxes contain scripted
commands which will be run by the handler to perform archive functions.

.SS MIME Type
This text box contains a space-separated list of MIME types
(such as application/x-compressed-tar), which is used to associate the handler with
those file types. Wildcards, such as asterisk '*' to represent multiple characters, and
question mark '?' to represent a single character, are accepted. A handler must have a
MIME Type or a Pathname pattern (see below), or it cannot be used to extract or list the
contents of archive files.

.SS Pathname
This text box contains a space-separated list of pathname globs to be used in addition
to MIME type to identify files compatible with this handler. For example, a Pathname
pattern of "*.tar.gz" will cause all filenames ending in ".tar.gz" to be associated
with this handler. The first pathname pattern in the list will determine the default
file extension used when creating archives with this handler. Note that the full
pathname of the file (eg /home/user/archive.tar.gz) is tested against the pattern,
so for advanced uses the pattern may contain directory parts (eg /home/user/*.tar.gz)
to control how archives in specific locations are handled.

.SS Compress
The Compress text box contains the commands which will be run if this handler is
selected to create an archive (or a single compressed file, etc.) The command(s) are
run as a bash script, and may contain any valid bash syntax (version 4, or any greater
version of bash you have installed). If the Run In Terminal box is checked, the script
will be run in your configured terminal emulator window (which may allow the user to
enter information, such as a password). If Run As Task is checked, the running command
will be listed in the task manager and error output will be shown in a popup. You can
also edit the commands in your configured editor by clicking on 'Edit' in the upper-right
corner, or press Alt-Enter while the cursor is in the box (remember to save the script in
your editor when finished).

Several variables will be replaced before your commands are run:

    %n: First selected filename/dir to archive
    %N: All selected filenames/dirs to archive, or (with %O) a single filename
    %o: Resulting single archive file
    %O: Resulting archive per source file/directory (use changes %N meaning)

When creating an archive, the user first selects one or more files or directories to be
included. These are passed to your command via the %n or %N variables, which are replaced
with quoted filenames. How these are used will depend on the type of archive you are
creating from the selected files: a single archive containing all files, or an archive
per source file/directory.

If you want to create a single archive containing all selected items, use %o to represent
the name of the resulting archive file (which will be chosen by the user at run time). With
%o, you will generally use %N to include the list of all selected files. (Or if you only
use %n, only the first selected file will be included in your archive.) For example, to
create a tar archive, you would use this Compress command:

    tar -cvf %o %N

Other kinds of archiving programs, such as compressing files with GZip, can only operate
on one file at a time. In this case, you will use the %O variable (a capital 'O' instead
of lowercase) to indicate to SpaceFM that you want your Compress command run multiple
times, once for each selected file or directory. In this case, %N will be replaced with
a single filename each time the command is run. (If %N is not included, the command
will only be run once. If you use %n with %O, it will only be replaced with the first
selected file the first time the command is run, and will then be empty "" on any
subsequent runs.) For example, to compress all selected files with GZip, use this command:

    gzip -c %N > %O

When SpaceFM sees the above command containing %O, it will know to run the gzip command
once for each file, and will replace %N with a single filename on each run. It will also
replace %O with a different output archive filename on each run, creating multiple files
(in this case with the .gz extension).

Note: To include a literal '%N' or other string in your command without it being
interpreted as a variable, use double percent signs (%%N).

In addition to the above variables, or instead of them, SpaceFM's
exported bash variables may be used.

To create an archive using your handler, select files to be archived in SpaceFM's
file list, right-click, and select New|Archive. Select your handler in the Format
list. You can also edit the Compress command in this dialog, and the updated command
will be saved to your handler.

To test your handler commands, run the spacefm program in a terminal, and observe
the output as SpaceFM is working on archives. This will show you the handlers chosen,
and the commands exactly as they are issued.

When running any commands in a terminal, SpaceFM will add a query at the end to
keep the terminal open if it sees a non-zero error status from the last command
run, or when listing archive contents. If you need to keep the terminal open for
other purposes, you can include these lines in your command:

    read -p '[ Finished ]  Press Enter to close: '

To trap any errors in commands containing multiple lines, you can use the
built-in error trap after each line:

    tar -cvf %o %N || fm_handle_err

.SS Extract
The Extract text box contains the commands which will be run if this handler
is selected to extract an archive (or uncompress a single compressed file, etc.)

Several variables will be replaced before your commands are run:

    %x: Archive file to extract
    %g: Unique extraction target filename with optional subfolder
    %G: Unique extraction target filename, never with subfolder

In most cases, you will only need the %x variable to represent the file being
extracted, as SpaceFM automatically runs your command in the directory to which
files should be extracted. For example, the Extract command for a tar file is simply:

  tar -xvf %x

In some cases, such as uncompressing a file with GZip, you will want SpaceFM to
give you a single non-existing filename to be used as the extraction target. For
this purpose you may use %g or %G. %g will cause SpaceFM to substitute a single
non-existing filename based on the archive name. If the user has selected the
Create Subfolder option, a subfolder will also be created for the file. However,
in cases like GZip, it is often unnecessary to create a subfolder for just one
file. In this case use %G, which will be substituted with a single non-existing
filename in the main extraction directory, and no subfolder will be created (even
if the user has option Create Subfolder enabled). For example, when decompressing
a GZipped file, rather than create a subfolder for the single output file, SpaceFM
simply uncompresses the file to the selected directory. It uses this Extract
command to do so:

    gzip -cd %x > %G

In addition to the above variables, or instead of them, SpaceFM's exported
bash variables may be used.

.SS List
The List text box contains the commands which will be run if this handler is
selected to list the contents of an archive file. It recognizes only the %x variable
which is replaced with the archive filename, and SpaceFM's exported bash
variables may also be used.

.SH Files
When you double-click on a file to open it, SpaceFM will use one of the following
methods to open the file, in this order of preference:

If a custom menu item is enabled and has context option Use as handler for: set
to 'files', the custom menu item will be activated. This may be used to open files
or take other actions. To add a custom menu item of this kind, simply right-click
on almost any existing menu item and select New|Command. On the Context page of
the Item Properties dialog, set 'Use as handler for: files'. Also be sure to add
context rules which determine when this handler will be active (or it will activate
for all types of files).

If the first selected file is a recognized archive type (eg tar.gz), and Archive
Defaults is set to Extract, Extract To, or List Contents, SpaceFM will attempt to
open all selected files with Archive Handlers, ignoring files for which it doesn't
have an archive handler.

Otherwise, if the MIME type or pathname of a selected file being opened matches a
dedicated File Handler, and the handler has option Enable as a default opener enabled,
the file handler will be run for that file.

If the MIME type of a selected file being opened has an application associated with it
in the MIME database, the default application will be used to open the file. SpaceFM's
MIME Menu may be used to change the application associated with a file type on your system.

You can also right-click on a file and use the Open menu to see some of the above options listed.

Note that multiple files may be opened or extracted by selecting them and
using Open|Open With Default, subject to the same rules above.

For feedback on how SpaceFM is opening files, run the first instance of spacefm
in a terminal, and observe the output in the terminal after opening a file in SpaceFM.

.SS File Handlers
File handlers are one method of several that SpaceFM may use to open specific types
of files, or they can perform any other action when a file is clicked. These handlers
work independently of the MIME associations on your system. To configure file handlers,
right-click on any file and select Open|File Handlers.

The list at the left of the File Handlers configuration window lists all file
handlers. (Enlarge this window to see the handler commands more clearly.) Click on a
handler's name to see its contents. The order of the list is important: Starting
from the top, the first handler which matches a file being opened will be used. You
can reorder the list by dragging entries, or using the Up & Down buttons.

The right side of the window shows the selected handler's contents. If option 'Enable
as a default opener' is checked, this handler will automatically run if you double-click
on a file of its type. Or, if the option is unchecked, the handler will only run if
you manually select it from the Open menu.

The Name and Icon text boxes are used to specify the common name and icon name for the
handler, which will appear in the menu and Task Manager. Next come MIME Type and
Pathname text boxes: these determine for what files this handler may be used. Finally,
the Open Command box contains scripted commands which will be run by the handler to
open the file(s), or perform any other function.

.SS MIME Type
This text box contains a space-separated list of MIME types (such as text/plain), which
is used to associate the handler with those file types. Wildcards, such as asterisk '*'
to represent multiple characters, and question mark '?' to represent a single character,
are accepted. For example, a MIME type of "video/*" will specify all video files. A handler
must have a MIME Type or a Pathname pattern (see below), or it will not be used.

.SS Pathname
This text box contains a space-separated list of pathname globs to be used in addition
to MIME type to identify files compatible with this handler. For example, a Pathname
pattern of "*.avi" will cause all AVI video files to be associated with this
handler. Note that the full pathname of the file (eg /home/user/videos/movie.avi) is
tested against the pattern, so for advanced uses the pattern may contain directory
parts (eg /home/user/videos/*.avi) to control how files in specific locations are handled.

.SS Open Command
This text box contains the commands which will be run if this handler is selected
to open one or more files. The command(s) are run as a bash script, and may contain
any valid bash syntax (version 4, or any greater version of bash you have installed). If
the Run As Task option is checked, the script will be run synchronously (will appear in
the Task Manager), and any error will be shown in a popup. If the Run In Terminal option
is checked, the script will be run in your configured terminal emulator window (which
allows the user to enter information). You can also edit the commands in your configured
editor by clicking on Edit in the upper-right corner, or press Alt-Enter while the
cursor is in the box (remember to save the script in your editor when finished).

Several variables will be replaced before your commands are run:

    %F  selected files
    %f  first selected file
    %N  selected filenames
    %n  first selected filename
    %d  current directory
    %v  selected device (eg /dev/sda1)
    %m  device mount point (eg /media/dvd)
    %a  auto create mount point

The presence of %a will cause SpaceFM to create a new directory to be used as a
mount point (eg ~/.cache/spacefm/mountpoint, and %a will be replaced with the
directory path. This can be used to mount files (eg iso files). When the device
is unmounted, this mount point will be removed. For example, this command will
mount an iso file using fuseoiso and open the mount point directory in SpaceFM:

    fuseiso %f %a && spacefm %a &

In addition to the above variables, SpaceFM's exported bash variables may be used,
as well as all the substitution variables defined in Command Line.

When running your commands in a terminal, if you need to keep the terminal open after
your command finishes, you can include these lines at the end of your command:

    read -p '[ Finished ]  Press Enter to close: '

To test your handler commands, run the spacefm program in a terminal, and observe
the output as SpaceFM is opening files. This will show you the handlers chosen,
and the commands exactly as they are issued.

.SH Options & Defaults
Each handler configuration window includes Options and Defaults buttons.

Pressing Defaults will restore the current handler to default values. The
handler must be a built-in default handler for this button to be enabled.

The Options button opens a popup menu which provides the following options. Note
that selecting any of these options automatically clicks Apply first if changes
have been made to the current handler.

.SS Export
Export allows you to save a handler to a plugin file which can be imported into
any version of SpaceFM 1.0.3 or later.

.SS Import File
Import File opens a file chooser dialog for you to select a plugin file to import. If
the plugin file is a handler, it will be imported into the appropriate list (the Device,
Protocol, Archive, or File handlers list). If the plugin file is not a handler, it will
be imported to the design clipboard.

.SS Restore Default Handlers
Restore Default Handlers will replace any missing default handlers that have been
removed from the handlers list, and will also ask if you want to overwrite all
existing default handlers. If you answer yes, all default handlers will be reset.
If you answer no, only missing handlers will be added. Any custom handlers you have
added are not affected.

.SH NOTES
These man pages are an almost verbatim copy of the html user manual

.SH SEE ALSO
.BR spacefm (1)
.br
.BR spacefm-design-menu (7)
.br
.BR spacefm-devices (7)
.br
.BR spacefm-gui (7)
.br
.BR spacefm-handlers (7)
.br
.BR spacefm-plugins (7)
.br
.BR spacefm-scripts (7)
.br
.BR spacefm-scripts-sys (7)
.br
.BR spacefm-socket (7)
.br
.BR spacefm-tasks (7)
.PP

.SH For full documentation and examples see the SpaceFM User's Manual
.PP
.I http://ignorantguru.github.io/spacefm/spacefm-manual-en.html
