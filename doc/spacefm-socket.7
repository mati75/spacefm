.TH spacefm-socket 7 "May 2022"

.SH NAME
.B spacefm-socket
socket commands


.SH Usage
.B spacefm --socket-cmd|-s
METHOD
.RI [ OPTIONS... "] [" ARGUMENT... ]


.SH Example:
.B spacefm socket set
window_size 800x600


.SH DESCRIPTION
.B Spacefm
socket commands permit external processes (such as command scripts)
to read and set GUI property values and execute methods inside running
SpaceFM windows. To handle events see View|Events in the main menu bar.


.SH Invocation
.P
.B METHODS
.P
.B spacefm socket set
.RI [ OPTIONS ]
PROPERTY
.RI [ VALUE... ]
    Sets a property

.B spacefm socket get
.RI [ OPTIONS ]
PROPERTY
    Gets a property

.B spacefm socket set-task
.RI [ OPTIONS ]
TASKID TASKPROPERTY
.RI [ VALUE... ]
    Sets a task property

.B spacefm socket get-task
.RI [ OPTIONS ]
TASKID TASKPROPERTY
    Gets a task property

.B spacefm socket run-task
.RI [ OPTIONS ]
TASKTYPE ARGUMENTS
    Starts a new task

.B spacefm socket emit-key
.RI [ OPTIONS ]
KEYCODE
.RI [ MODIFIER ]
    Activates a menu item by emitting its shortcut key

.B spacefm socket activate
.RI [ OPTIONS ]
NAME
    Runs custom command or shows submenu named NAME

.B spacefm socket add-event
EVENT COMMAND...
    Add asynchronous handler COMMAND to EVENT

.B spacefm socket replace-event
EVENT COMMAND...
    Add synchronous handler COMMAND to EVENT, replacing default handler

.B spacefm socket remove-event
EVENT COMMAND...
    Remove handler COMMAND from EVENT

.B spacefm socket ping
    Test socket read/write


.B OPTIONS
Add options after METHOD to specify a specific window, panel, and/or tab.
Otherwise the current tab of the current panel in the last window is used.
.TP
.B --window WINDOWID
    Specify window.  eg: spacefm socket set --window 0x104ca80 window-size 800x600
.TP
.B --panel PANEL
    Specify panel 1-4.  eg: spacefm socket set --panel 2 devices-visible true
.TP
.B --tab TAB
    Specify tab 1-...  eg: spacefm socket set --tab 3 selected-filenames fstab
.PP

.B GET PROPERTIES
.P
 Set properties with METHOD 'set', or get the value with 'get'.
 window-size                     eg '800x600'
 window-position                 eg '100x50'
 Window-maximized                1|true|0|false
 window-fullscreen               1|true|0|false
 screen-size                     eg '1024x768'  (read-only)
 window-vslider-top              eg '100'
 window-vslider-bottom           eg '100'
 window-hslider                  eg '100'
 window-tslider                  eg '100'
 focused-panel                   1|2|3|4|prev|next|hide
 focused-pane                    filelist|devices|bookmarks|dirtree|pathbar
 current-tab                     1|2|...|prev|next|close
 panel-count                       1|2|...
 tab-count                       1|2|...
 devices-visible                 1|true|0|false
 dirtree-visible                 1|true|0|false
 toolbar-visible                 1|true|0|false
 sidetoolbar-visible             1|true|0|false
 hidden-files-visible            1|true|0|false
 panel1-visible                  1|true|0|false
 panel2-visible                  1|true|0|false
 panel3-visible                  1|true|0|false
 panel4-visible                  1|true|0|false
 panel-hslider-top               eg '100'
 panel-hslider-bottom            eg '100'
 panel-vslider                   eg '100'
 column-width                    name|size|type|permission|owner|modified WIDTH
 sort-by                         name|size|type|permission|owner|modified
 sort-ascend                     1|true|0|false
 sort-alphanum                   1|true|0|false
 sort-natural                    1|true|0|false
 sort-case                       1|true|0|false
 sort-hidden-first               1|true|0|false
 sort-first                      files|folders|mixed
 show-thumbnails                 1|true|0|false
 large-icons                     1|true|0|false
 statusbar-text                  eg 'Current Status: Example'
 pathbar-text                    TEXT
 current-dir                     DIR            eg '/etc'
 selected-filenames              [FILENAME...]
 selected-pattern                [PATTERN]      eg '*.jpg'
 clipboard-text                  eg 'Some\\nlines\\nof text'
 clipboard-primary-text          eg 'Some\\nlines\\nof text'
 clipboard-copy-files            FILE...  Files copied to clipboard
 clipboard-cut-files             FILE...  Files cut to clipboard

.B SET PROPERTIES
.P
 Set properties with METHOD 'set', or get the value with 'get'.
 window-size                     eg '800x600'
 window-position                 eg '100x50'
 Window-maximized                1|true|0|false
 window-fullscreen               1|true|0|false
 window-vslider-top              eg '100'
 window-vslider-bottom           eg '100'
 window-hslider                  eg '100'
 window-tslider                  eg '100'
 focused-panel                   1|2|3|4|prev|next|hide
 focused-pane                    filelist|devices|bookmarks|dirtree|pathbar
 current-tab                     1|2|...|prev|next|close
 new-tab                         [DIR]    Open DIR or default in a new tab
 devices-visible                 1|true|0|false
 dirtree-visible                 1|true|0|false
 toolbar-visible                 1|true|0|false
 sidetoolbar-visible             1|true|0|false
 hidden-files-visible            1|true|0|false
 panel1-visible                  1|true|0|false
 panel2-visible                  1|true|0|false
 panel3-visible                  1|true|0|false
 panel4-visible                  1|true|0|false
 panel-hslider-top               eg '100'
 panel-hslider-bottom            eg '100'
 panel-vslider                   eg '100'
 column-width                    name|size|type|permission|owner|modified WIDTH
 sort-by                         name|size|type|permission|owner|modified
 sort-ascend                     1|true|0|false
 sort-alphanum                   1|true|0|false
 sort-natural                    1|true|0|false
 sort-case                       1|true|0|false
 sort-hidden-first               1|true|0|false
 sort-first                      files|folders|mixed
 show-thumbnails                 1|true|0|false
 large-icons                     1|true|0|false
 pathbar-text                    TEXT
 current-dir                     DIR            eg '/etc'
 selected-filenames              [FILENAME...]
 selected-pattern                [PATTERN]      eg '*.jpg'
 clipboard-text                  eg 'Some\\nlines\\nof text'
 clipboard-primary-text          eg 'Some\\nlines\\nof text'
 clipboard-from-file             eg '~/copy-file-contents-to-clipboard.txt'
 clipboard-primary-from-file     eg '~/copy-file-contents-to-clipboard.txt'
 clipboard-copy-files            FILE...  Files copied to clipboard
 clipboard-cut-files             FILE...  Files cut to clipboard

.B GET TASK PROPERTIES
 status                          contents of Status task column
 icon                            eg 'gtk-open'
 count                           text to show in Count task column
 folder                          text to show in Folder task column
 item                            text to show in Item task column
 to                              text to show in To task column
 progress                        progress percent (1..100) or '' to pulse
 total                           text to show in Total task column
 curspeed                        text to show in Current task column
 curremain                       text to show in CRemain task column
 avgspeed                        text to show in Average task column
 avgremain                       text to show in Remain task column
 elapsed                         contents of Elapsed task column
 started                         contents of Started task column
 queue_state                     run|pause|queue|stop
 popup_handler                   COMMAND  command to show a custom task dialog

.B SET TASK PROPERTIES
 icon                            eg 'gtk-open'
 count                           text to show in Count task column
 folder                          text to show in Folder task column
 item                            text to show in Item task column
 to                              text to show in To task column
 progress                        progress percent (1..100) or '' to pulse
 total                           text to show in Total task column
 curspeed                        text to show in Current task column
 curremain                       text to show in CRemain task column
 avgspeed                        text to show in Average task column
 avgremain                       text to show in Remain task column
 queue_state                     run|pause|queue|stop
 popup_handler                   COMMAND  command to show a custom task dialog

.B RUN TASK PROPERTIES
 status                          contents of Status task column  (read-only)
 icon                            eg 'gtk-open'
 count                           text to show in Count task column
 folder                          text to show in Folder task column
 item                            text to show in Item task column
 to                              text to show in To task column
 progress                        progress percent (1..100) or '' to pulse
 total                           text to show in Total task column
 curspeed                        text to show in Current task column
 curremain                       text to show in CRemain task column
 avgspeed                        text to show in Average task column
 avgremain                       text to show in Remain task column
 elapsed                         contents of Elapsed task column (read-only)
 started                         contents of Started task column (read-only)
 queue_state                     run|pause|queue|stop
 popup_handler                   COMMAND  command to show a custom task dialog


.B TASK TYPES
.B cmd
.RI [ --task "] [" --popup "] [" --scroll "] [" --terminal "] [" --icon=ICON "] [" --dir=DIR ]
COMMAND... <Run COMMAND in DIR>

copy|move|link [--dir DIR] FILE|DIR... TARGET
                                Copy|Move|Link FILE(s) or DIR(s) to TARGET dir
delete [--dir DIR] FILE|DIR...  Recursively delete FILE(s) or DIR(s)
trash [--dir DIR] FILE|DIR...   Recursively trash FILE(s) or DIR(s)
edit FILE                       Open FILE in user's text editor
mount DEVICE|URL                Mount DEVICE or URL
umount DEVICE|DIR               Unmount DEVICE or mount point DIR

.SH EVENTS
 evt_start                       Instance start        %e
 evt_exit                        Instance exit         %e
 evt_win_new                     Window new            %e %w %p %t
 evt_win_focus                   Window focus          %e %w %p %t
 evt_win_move                    Window move/resize    %e %w %p %t
 evt_win_click                   Mouse click           %e %w %p %t %b %m %f
 evt_win_key                     Window keypress       %e %w %p %t %k %m
 evt_win_close                   Window close          %e %w %p %t
 evt_pnl_focus                   Panel focus           %e %w %p %t
 evt_pnl_show                    Panel show/hide       %e %w %p %t %f %v
 evt_pnl_sel                     Selection changed     %e %w %p %t
 evt_tab_new                     Tab new               %e %w %p %t
 evt_tab_chdir                   Tab change dir        %e %w %p %t %d
 evt_tab_focus                   Tab focus             %e %w %p %t
 evt_tab_close                   Tab close             %e %w %p %t
 evt_device                      Device change         %e %f %v

.SH Event COMMAND Substitution Variables
 %e   event type (evt_start|evt_exit|...)
 %w   window ID
 %p   panel number (1-4)
 %t   tab number (1-...)
 %d   quoted directory ('/etc')
 %b   mouse button (0=double 1=left 2=middle 3=right ...)
 %k   key code  (eg 0x63)
 %m   modifier key (eg 0x4  used with clicks and keypresses)
 %f   focus element (panelN|filelist|devices|bookmarks|dirtree|pathbar)
 %v   focus element is visible (0 or 1, or device state change)

.B Examples
.P
 window_size="$(spacefm socket get window_size)"
 spacefm socket set window_size 1024x768
 spacefm socket set column_width name 100
 spacefm socket set-task $fm_my_task progress 25
 spacefm socket run-task --window $fm_my_window cmd --task --popup ls /etc
 spacefm socket run-task copy --dir /etc fstab hosts /destdir
 spacefm -r /etc; sleep 0.3; spacefm socket set selected_filenames fstab hosts
 spacefm socket set clipboard_copy_files /etc/fstab /etc/hosts
 spacefm socket emit-key 0xffbe 0   # press F1 to show Help
 spacefm socket activate --window $fm_my_window "Custom Menu"
 spacefm socket add-event evt_pnl_sel 'spacefm socket set statusbar_text "$fm_file"'


.B EXAMPLE SCRIPT
.P
 #!/bin/bash
 eval copied_files="$(spacefm socket get clipboard_copy_files)"
 echo "These files have been copied to the clipboard:"
 i=0
 while [ "${copied_files[i]}" != "" ]; do
     echo "    ${copied_files[i]}"
     (( i++ ))
 done
 if (( i != 0 ));then
     echo "MD5SUMS:"
     md5sum "${copied_files[@]}"
 fi

.SH Methods
Methods represent different kinds of socket commands:
.P
.B set
.br
Usage: spacefm socket set [OPTIONS] PROPERTY [VALUE...]

The set method sets a property to one or more values. Different properties
accept different kinds of values. To see what values a property accepts,
look the property up in the Help Reference.

As with all methods, by default the set method will apply to the current tab
in the current panel of the last used SpaceFM window. You can also specify a
particular window, panel, and/or tab using the --window, --panel, and/or --tab
OPTIONS. (The WINDOWID used by the --window option is obtained from
the $fm_my_window bash variable.) For example:

    spacefm socket set --window $fm_my_window --panel 3 --tab 2 pathbar_text "/"
.P
.B Examples using the set method:

    # Set the size of the last used SpaceFM window:
    spacefm socket set window_size 1024x768

    # Set the size of my tasks's SpaceFM window
    spacefm socket set --window $fm_my_window window_size 1024x768

    # Maximize the window:
    spacefm socket set window_maximized 1

    # Show panel 3:
    spacefm socket set panel3_visible true

    # Focus panel 3:
    spacefm socket set focused_panel 3

    # Hide the Dir Tree:
    spacefm socket set dirtree_visible 0

    # Set the position of the vertical slider between panels 1 and 2:
    spacefm socket set window_vslider_top 400

    # Set the width of the Name column:
    spacefm socket set column_width name 100

    # Set the text in panel 2's status bar:
    spacefm socket set --panel 2 statusbar_text "Custom Status"

    # Remove the custom text in panel 2's status bar:
    spacefm socket set --panel 2 statusbar_text

    # Set the text in the pathbar:
    spacefm socket set pathbar_text "/etc"

    # Set the text in the pathbar and select it:
    spacefm socket set pathbar_text "/etc" 0

    # Focus the pathbar (put cursor there):
    spacefm socket set focused_pane pathbar

    # Change to directory '/etc':
    spacefm socket set current_dir '/etc'

    # Select files named 'fstab' and 'hosts', unselect others:
    spacefm socket set selected_files 'fstab' 'hosts'

    # Unselect all files:
    spacefm socket set selected_files

    # Select all files:
    spacefm socket set selected_pattern '*'

    # Select all jpg files, unselect others:
    spacefm socket set selected_pattern '*.jpg'

    # Copy text to the clipboard:
    spacefm socket set clipboard_text 'Some text'

    # Copy multiple lines of text to the clipboard:
    spacefm socket set clipboard_text 'Some\nlines\nof text'

    # Copy the contents of a text file to the clipboard:
    spacefm socket set clipboard_from_file /etc/fstab

    # Copy text to the primary (middle-click) clipboard:
    spacefm socket set clipboard_primary_text 'Some primary text'

    # Copy files to the clipboard:
    spacefm socket set clipboard_copy_files /etc/fstab /etc/hosts

    # Cut files to the clipboard:
    spacefm socket set clipboard_cut_files /etc/fstab /etc/hosts

    # Adjust sort settings:
    spacefm socket set sort_by size
    spacefm socket set sort_by name
    spacefm socket set sort_ascend false
    spacefm socket set sort_alphanum true
    spacefm socket set sort_first folders

.P
.B get
.br
Usage: spacefm socket get [OPTIONS] PROPERTY

The get method gets a property's value. The reply is written to stdout.

As with all methods, by default the get method will apply to the current
tab in the current panel of the last used SpaceFM window. You can also
specify a particular window, panel, and/or tab using the --window, --panel,
and/or --tab OPTIONS.

The reply to a get can be saved in a bash variable directly:

    size="$(spacefm socket get window_size)"
    echo "$size"
    # Or, the reply can be tested directly:
    if [ "$(spacefm socket get clipboard_text)" == "" ];then
        echo "The clipboard is empty"
    fi
.P
.B Examples using the get method:

    # Is the window maximized?
    spacefm socket get window_maximized

    # Is panel 3 shown?
    spacefm socket get panel3_visible

    # Which panel is focused?
    spacefm socket get focused_panel

    # Is the Bookmarks pane shown in panel 4?
    spacefm socket get --panel 4 bookmarks_visible

    # Get the position of the vertical slider between panels 1 and 2:
    spacefm socket get window_vslider_top

    # Get the width of the Size column:
    spacefm socket get column_width size

    # Get the text in panel 2's status bar:
    spacefm socket get --panel 2 statusbar_text

    # Get the current directory of tab 2:
    spacefm socket get --tab 2 current_dir

    # Get the text on the clipboard:
    spacefm socket get clipboard_text

    # Get the text on the clipboard and write it to a file:
    spacefm socket get clipboard_text > /tmp/clipboard-contents.txt

.B When the clipboard contains cut or copied files,
clipboard_text will contain the paths of the files, one per line, as text.

Or, when getting the value of clipboard_copy_files or clipboard_cut_files,
SpaceFM will reply with an array of quoted paths. For example:

    # First copy some files to the clipboard:
    spacefm socket set clipboard_copy_files /etc/fstab /etc/hosts

    # Now get the files on the clipboard:
    spacefm socket get clipboard_copy_files
    ('/etc/fstab' '/etc/hosts' )

The returned value in the above example is intended to be saved to a bash
array using eval. For example, the following script reads the copied files
into an array, prints each member of the array, one per line, then calculates
the MD5 sums of the files by passing the array to md5sum as a list:

    #!/bin/bash
    # Read the copied files into an array:
    eval copied_files="$(spacefm socket get clipboard_copy_files)"

    echo "These files have been copied to the clipboard:"
    i=0
    while [ "${copied_files[i]}" != "" ]; do
        echo "    ${copied_files[i]}"
        (( i++ ))
    done
    if (( i != 0 )); then
        echo "MD5SUMS:"
        md5sum "${copied_files[@]}"
    fi

Note that when files have been copied to the clipboard, clipboard_copy_files
will contain the list, and clipboard_cut_files will be empty. When files have
been cut to the clipboard, clipboard_cut_files will contain the list, and
clipboard_copy_files will be empty.
Traditionally, when cut files are successfully copied to another location,
you should then delete them from their original location, whereas files which
have merely been copied to the clipboard are never deleted.

Likewise, when getting the value of selected_filenames, SpaceFM will reply
with an array of quoted filenames. For example:

    #!/bin/bash
    # Read the selected filenames into an array:
    eval sel_files="$(spacefm socket get selected_filenames)"

    echo "These filenames are selected:"
    i=0
    while [ "${sel_files[i]}" != "" ]; do
        echo "    ${sel_files[i]}"
        (( i++ ))
    done
    if (( i != 0 )); then
        cd "$(spacefm socket get current_dir)"
        echo "MD5SUMS:"
        md5sum "${sel_files[@]}"
    fi

.P
.B set-task
.br
Usage: spacefm socket set-task [OPTIONS] TASKID TASKPROPERTY [VALUE...]
.P

The set-task method is used to change the display values for a task, and
also to stop, pause, queue, or resume a task, by setting a task property.
Different task properties accept different kinds of values. To see what
values a task property accepts, look the task property up in the Help Reference.

Display values for a task are shown in the Task Manager, and also in task
popup dialogs. These include such things as the Item, Total, Current,
Remain, and other columns, the progress bar percentage, etc.

As with all methods, by default the set-task method will apply to the current
tab in the current panel of the last used SpaceFM window. You can also
specify a particular window, panel, and/or tab using the --window, --panel,
and/or --tab OPTIONS.

The set-task method requires a TASKID, which indicates what task is being
modified. There are two ways to obtain the TASKID. One is to use the exported
bash variable $fm_my_task, which refers to the current command task. The
other is to use $fm_task_id, which refers to the task currently selected
in the task list when the current task is run. Note that a TASKID is only
valid in the window in which the task is currently running, so it is generally
appropriate to specify a WINDOWID ($fm_my_window) with the --window option to
ensure the correct window is accessed.

Note that when using $fm_my_task, the TASKID will not be valid when the command is first run -
.B it usually takes about a half second for a task to appear in the task manager.
If your script uses $fm_my_task immediately, it should plan for the socket command
to fail until the task is shown in the task manager, or it can use a small
delay (sleep 0.75) before sending task-related socket commands.

Also,
.Bif a custom command is run from the SpaceFM desktop manager menu,
note that there is no task manager or window associated with the task, so
the TASKID will not be valid in socket commands.

Examples using the set-task method:

    # Set my task's progress bar to 25%:
    spacefm socket set-task --window $fm_my_window $fm_my_task progress 25

    # Set the current item being processed in my task:
    spacefm socket set-task --window $fm_my_window $fm_my_task item "File 2"

    # Set the average speed displayed for my task (any text is valid):
    spacefm socket set-task --window $fm_my_window $fm_my_task avgspeed "10 M/s"

    # Pause my task:
    spacefm socket set-task --window $fm_my_window $fm_my_task queue_state pause

The task property 'popup_handler', which accepts a bash command line, allows
you to set a command to be run when the user clicks on the task in the Task
Manager. Normally a click opens a task's popup dialog, but if popup_handler
is set, that command will be run instead. This allows you to integrate your
custom command's dialog into SpaceFM. The following script, to be run as a
custom command script in SpaceFM, demonstrates this property's use:

    #!/bin/bash
    # Set a custom task dialog in SpaceFM.
    # Run this script as a SpaceFM custom command script.
    $fm_import

    # make a command pipe to talk to the dialog
    cmdpipe=/tmp/spacefm-task-dialog.pipe
    rm -f "$cmdpipe"
    mkfifo "$cmdpipe"

    # must wait for this task to be shown in manager before setting property
    ( sleep .75 ; spacefm socket set-task $fm_my_task popup_handler "echo show > '$cmdpipe'" ) &

    # show dialog
    spacefm -g --label "\\nThis window will be shown when you click on this \\
    task in SpaceFM's Task Manager." \\
               --button close rm "$cmdpipe" -- close \\
               --command "$cmdpipe" \\
               --window-close rm "$cmdpipe" -- close > /dev/null

    # cleanup
    spacefm socket set-task $fm_my_task popup_handler
    rm -f "$cmdpipe"
    exit
.P
Running the above command script within SpaceFM will show the dialog. Anytime
you click on the task in the list, the dialog will be raised. Note that the
popup_handler command is only run when the user clicks on the task in the list.
It is not run when the normal task popup dialog is raised due to a task's
Popup settings.

When popup_handler is set, the additional Show Output menu item will appear
in the right-click context menu for the task, which opens the normal popup dialog.
get-task

.P
.B get-task
.br
Usage: spacefm socket get-task [OPTIONS] TASKID TASKPROPERTY

The get-task method gets a task property's value. The reply is written to
stdout. For instructions on saving the reply to a variable or testing it directly,
see the examples in get.

As with the set-task method, get-task requires a TASKID, and passing a WINDOWID is also recommended.

Examples using the get-task method:

    # Get my task's progress bar value:
    spacefm socket get-task --window $fm_my_window $fm_my_task progress

    # Get the current status of my task (this is a read-only value):
    spacefm socket get-task --window $fm_my_window $fm_my_task status

    # Get the running state of my task (run|pause|queue):
    spacefm socket get-task --window $fm_my_window $fm_my_task queue_state


.P
.B run-task
.br
Usage: spacefm socket run-task [OPTIONS] TASKTYPE [TYPEOPTIONS] ARGUMENTS

The run-task method is used to tell a running SpaceFM window to start a new
task. A task may run an asynchronous command (run and forget), a command run
as a SpaceFM task (shown in the Task Manager if it runs for more than one
half second), or an internal task to copy, move, or delete files, or create
links. A task can also be used to run a command in the user's configured
terminal, or open a file in the user's configured text editor.

To run a task in a particular SpaceFM window, or with the exported bash
variables of a particular tab, --window, --panel, and --tab OPTIONS may be included.

Each TASKTYPE accepts a different set of TYPEOPTIONS and ARGUMENTS, as detailed below.

.B cmd [--task] [--popup] [--scroll] [--terminal] [--icon ICON] [--dir DIR] COMMAND...

The cmd (or 'command') TASKTYPE is used to run a program or bash command. Exported
bash variables may be used in any COMMAND - just remember to include the $fm_import
line in your command or script. Note that the contents of the variables will reflect
the window, panel, and tab active for the socket command, not necessarily the focused
tab of SpaceFM.

By default COMMAND is run asynchronously (run and forgotten). It will not appear
in the Task Manager, and no popup will be shown. For example:

    spacefm socket run-task cmd touch /tmp/a_new_file
cmd also accepts the following TYPEOPTIONS:

.B TYPEOPTION

.B --task
Run COMMAND as a SpaceFM task and list it in the Task Manager if it runs for more
than one half second, and show a popup dialog if the command's exit status is
non-zero. This is equivalent to custom command options Run As Task plus Popup Error.

.B --popup
Run COMMAND as a SpaceFM task and show a popup dialog if the task runs for longer
than one half second or produces output or an error. This is equivalent to custom
command options Run As Task plus Popup Output plus Popup Error.

.B --scroll
If option --task or --popup is used with --scroll, the scrollbar in the popup will
be moved down, equivalent to custom command option Scroll.

.B --terminal
Run COMMAND in the user's configured terminal emulator. This is equivalent to custom
command option Run In Terminal. Generally this option is used without --task or --popup.

.B --icon ICON
Use ICON as the task's icon in the Task Manager and popup dialog, where ICON is an
icon name or absolute path. Not all icons may be shown due to various issues.

.B --dir DIR
Start COMMAND in working directory DIR. If not specified, SpaceFM's current working
directory is used.
If the --task or --popup options are used, meaning the task is run as a SpaceFM
task, the command will return values for $new_task_id and $new_task_window, to
be used in future socket commands for this running task. For example:

    spacefm socket run-task cmd --popup 'while true; do date; sleep 1; done'
    #!/bin/bash
    # Note: $new_task_id not valid until approx one half second after task start
    new_task_window=0x207a030
    new_task_id=0x2343150

The output can be evaluated in one step like so (note the double-quoted backticks):

    eval "`spacefm socket run-task cmd --popup 'while true; do date; sleep 1; done'`"
    echo "Task window is $new_task_window and ID is $new_task_id."
    Task window is 0x207a030 and ID is 0x23432a0.

Note when attempting to use $new_task_id in socket commands, the task ID will
not be recognized until the task is listed in the Task Manager, which takes about
one half second (if the command runs that long).

.B copy|move|link [--dir DIR] FILE|DIR... TARGET

The copy, move, and link TASKTYPEs start an internal SpaceFM task to copy, move,
or create links to files and folders. The task will be listed in the Task Manager
if it runs for longer than one half second. If files already exist in the TARGET
directory, the SpaceFM overwrite query dialog will be shown as usual.

FILE(s) and DIR(s) may be specified as absolute paths. Or, if the --dir DIR option
is used to specify an (absolute) source directory, they may be relative to DIR.
Each FILE and DIR specified must exist. TARGET, which is required as the last
argument, specifies an absolute destination directory.

For example:

    spacefm socket run-task copy /etc/fstab /etc/hosts /tmp

The above command will copy the files 'fstab' and 'hosts' from /etc to /tmp. Also,
the following command is equivalent:

    spacefm socket run-task copy --dir /etc fstab hosts /tmp

In the above case, a source directory is specified so that simple filenames may be
used in place of absolute paths.
Another example, to create links to files and folders:

    spacefm socket run-task link /etc /etc/fstab /tmp

The above command will create links to the folder /etc and the file /etc/fstab,
placing them in /tmp. As with the cmd TASKTYPE, copy, move, and link TASKTYPEs will
output $new_task_window and $new_task_id for evaluation and later use.

.B delete [--dir DIR] FILE|DIR...

The delete TASKTYPE starts an internal SpaceFM task to recursively delete
files and folders. The task will be listed in the Task Manager if it runs
for longer than one half second.

FILE(s) and DIR(s) may be specified as absolute paths. Or, if the --dir DIR
option is used to specify an (absolute) source directory, they may be
relative to DIR. Each FILE and DIR must exist.

WARNING: No confirmation dialog is shown to the user before files are
deleted permanently. If you want a confirmation dialog, your command or
script must show one itself. Also note that any specified folders are
deleted recursively.

For example, to delete the links created in the previous example:

    spacefm socket run-task delete /tmp/etc /tmp/fstab

As with the cmd TASKTYPE, the delete TASKTYPE will output $new_task_window
and $new_task_id for evaluation and later use.

.B edit FILE

The edit TASKTYPE opens FILE in the user's configured text
editor (set in View|Preferences|Advanced). This task type is always
asynchronous (run and forgotten). For example:

    spacefm socket run-task edit /etc/fstab

IMPORTANT: If sharing a plugin which does anything as root, please be sure
to include this information clearly in the plugin's description.

.B mount DEVICE|URL

The mount TASKTYPE uses the appropriate device or protocol handler to
mount a DEVICE (eg /dev/sdd1) or URL (eg ftp://mirrors.kernel.org/). This
task type may produce an error pop-up message, but does not set an error
status on failure. For example:

    spacefm socket run-task mount /dev/sdd1

Note: If you want to both mount and open a device or URL in
SpaceFM's file manager, consider using:

    spacefm /dev/sdd1
    or
    spacefm ftp://mirrors.kernel.org/

.B umount DEVICE|DIR

The umount TASKTYPE uses the appropriate device or protocol handler
to umount a DEVICE (eg /dev/sdd1) or mount point DIR. This task type
may produce an error pop-up message, but does not set an error status
on failure. For example:

    spacefm socket run-task umount /dev/sdd1

.P
.B emit-key
.br
Usage: spacefm socket emit-key [OPTIONS] KEYCODE [MODIFIER]

The emit-key method activates the menu or toolbar item with the given
shortcut key, as if the user had pressed the key combination.

The KEYCODE and MODIFIER for a given key combination can be seen by
right-clicking on an item, selecting Key Shortcut, and pressing the
key combination.

For example, to activate the menu item associated with
Ctrl+C (associated with Copy by default):

    spacefm socket emit-key 0x63 0x4

The KEYCODE and MODIFIER may also be specifed as decimal numbers by
omitting the '0x' hexadecimal prefix.

.P
.B activate
.br
Usage: spacefm socket activate [OPTIONS] NAME

The activate method is used to activate (run) a custom command,
bookmark, or application from any menu or toolbar. Or, if the named
item is a custom submenu, the submenu will be shown as a popup menu.

NAME is the name of the item or submenu as it appears in the
menu (underscores may be omitted). If multiple items have NAME
as their name, only one will be activated. Alternatively, you
can specify the internal name of the command, found in the command
directory name, such as "cstm_782d52a7".

For example, add a submenu anywhere named "My Gizmos", and add
one or more commands inside the submenu. To make it popup:

    spacefm socket activate 'My Gizmos'

When using activate to open a popup menu from within an
evt_win_click event handler for the file list, a small delay may
be needed before the menu is shown to prevent it from closing
immediately when the mouse button is released:

    *if [ "%b" != "2" ]; then exit 1; fi; ( sleep .2; spacefm socket activate "A-C" ) &

Because the sleep and spacefm commands are within parentheses, they
are both backgrounded by the ampersand (&), preventing a lag in the GUI.
NOTE: Prior to SpaceFM 1.0.4, the 'activate' method was called 'show-menu',
and only worked for submenus, not commands. As of 1.0.4, 'show-menu' is
deprecated yet still accepted in lieu of 'activate'.


.P
.B add-event
.br
Usage: spacefm socket add-event EVENT COMMAND ...

The add-event method is used to dynamically add an asynchronous handler
command to an event, such that when EVENT occurs, COMMAND will be run
asynchronously (SpaceFM will not wait for it to finish).

COMMAND is a bash command line. If any arguments follow it, they are
added to the command before it is passed to bash. For all events except
evt_start, evt_exit, evt_tab_close, and evt_device, the exported bash
variables can be used in the command. COMMAND also accepts event
substitution variables, which will vary with the event type.

add-event may be used any number of times to add additional event handler
commands to the same or different event types.

Note that COMMAND will continue to run anytime EVENT occurs during the
lifetime of the current SpaceFM instance, so be sure to remove the
handler when your script is finished using it.

In addition to adding dynamic event handlers, you can also set static
event handlers using the View|Event Manager menu.

Note that a single SpaceFM instance may open multiple windows, so your
handler will run when events occur in any window. The handler can test
for a specific window using the %w (window ID) substitution variable in
the command (which will correspond to a task's $fm_my_window bash variable).

For example, the following command will add a handler to the
evt_pnl_sel (selection has changed) event, such that anytime the user
changes the selection of files in the file list, the status bar will be
set to display the first selected file's path:

    spacefm socket add-event evt_pnl_sel 'spacefm socket set statusbar_text "$fm_file"'

Note that to preserve the quotes and dollar sign for bash to evaluate,
the entire command is single-quoted and passed as a single argument.
Alternatively, escaping those characters yields the same result:

    spacefm socket add-event evt_pnl_sel spacefm socket set statusbar_text \\"\\$fm_file\\"



.P
.B replace-event
.br
Usage: spacefm socket replace-event EVENT COMMAND ...

The replace-event method is used to dynamically add a synchronous handler
command to an event, such that when EVENT occurs, COMMAND will be run
synchronously (SpaceFM will wait for it to finish, and will examine the exit status).

Because the command is run synchronously, SpaceFM's GUI will freeze while
the command is being run. Your command should return a quick exit status
to make this freeze minimal, then spawn a process to continue to perform
whatever actions are desired.

For event types evt_win_click (a mouse click), evt_win_key (a keypress),
and evt_pnl_sel (file selection changed), SpaceFM will use the exit status
of your command to determine whether SpaceFM's built-in handler for the
event type should run after your command. If the exit status is zero,
this will inhibit the built-in handler. For example, if the user clicks
the right mouse button, and your command returns zero exit status,
SpaceFM will not show the right-click context menu normally shown by
the built-in handler.

If more than one replace-event is set for a evt_win_click, evt_win_key,
or evt_pnl_sel event type (including one set in the View|Event Manager menu),
any zero exit status will inhibit the built-in handler.

Using replace-event to set a handler for an event type other than
evt_win_click, evt_win_key or evt_pnl_sel will cause the command to run
synchronously (SpaceFM will wait for it and it will freeze the GUI until
it exits) but the exit status will have no effect. (These events are
notification only, so there is no built-in handler to inhibit.)

COMMAND is a bash command line. If any arguments follow it, they are
added to the command before it is passed to bash. Exported bash variables
may NOT be used in COMMAND. COMMAND also accepts event substitution
variables, which will vary with the event type.

replace-event may be used any number of times to add additional synchronous
event handler commands to the same or different event types.

Note that COMMAND will continue to run anytime EVENT occurs during the
lifetime of the current SpaceFM instance, so be sure to remove the handler
when your script is finished using it.

For example, the following command will add a handler to the
evt_win_click event. If the user clicks a button other than the middle
mouse button (%b = 2), the command returns exit status 1, so the built-in
handler is used. But if the user clicks the middle mouse button, then a
dialog message is displayed, and the command returns 0 (the default status
on success), inhibiting the built-in handler.

    spacefm socket replace-event evt_win_click 'if [ "%b" != "2" ]; then exit 1; fi; \\
        spacefm -g --label "\\nMiddle button was clicked" --button ok &'

Note the ampersand (&) after the 'spacefm -g' command. This runs the
command asynchronously (run and forget) so the exit status is returned
immediately and it does not cause a lag in the GUI.

.P
.B remove-event
.br
Usage: spacefm socket remove-event EVENT COMMAND ...

The remove-event method removes an event handler previously set with
the add-event or replace-event methods. You must pass remove-event the
exact same EVENT and COMMAND that you passed when adding the handler.

Because all handlers continue to run for the lifetime of the current
SpaceFM instance, your scripts should remove all handlers they have added
before finishing. When the SpaceFM instance exits, all dynamic event
handlers are automatically removed. (If you want dynamic handlers to always
be present, use the evt_start event to add them.)

remove-event cannot remove static handlers set in the View|Event Manager menu.

.SH Events
Events represent actions or changes in the GUI, such as the user closing
a tab, selecting a file, or opening a new window. SpaceFM has built-in
handlers for these events, which update the GUI, open menus, or take other
actions. You can also add your own handlers for events, commands which are
run to take a custom action after the event occurs. In some cases your custom
handler can replace the action normally taken by SpaceFM's built-in handler,
allowing you to modify the default behavior in the GUI.

Event handlers can be added in the Event Manager menu. Those handler commands
always run until you remove them. Dynamic event handlers can also be added
using the add-event or replace-event socket methods. These handlers will remain
in effect until you remove them with the remove-event method, or until the
SpaceFM instance exits.

The following events are available. The name in parentheses is the event name
as found in the Event Manager menu. Any event substitution variables available
with the event are shown after it (eg %e). evt_start (Instance|Start) %e
Occurs only once per instance when the SpaceFM instance first starts. Note that
a single SpaceFM instance may open multiple windows. This is a good event to use
to add any dynamic event handlers which you always want running.
.P
.B evt_exit (Instance|Exit) %e
Occurs only once per instance when the SpaceFM instance exits. If a daemon or
desktop manager instance is running, this event will occur when the user logs
out. Otherwise, the instance will exit when the last SpaceFM window is closed.
.P
.B evt_win_new (Window|New) %e %w %p %t
Occurs whenever a new SpaceFM window is opened, including the initial window.
.P
.B evt_win_focus (Window|Focus) %e %w %p %t
Occurs whenever a SpaceFM window receives focus. For example, if you switch
to another window in your window manager, then switch back to a SpaceFM window,
this event will occur.
.P
.B evt_win_move (Window|Move) %e %w %p %t
Occurs whenever a SpaceFM window is moved or resized. Note that during resizing,
any handler for this event may be run multiple times (up to five times per second).
.P
.B evt_win_click (Window|Click) %e %w %p %t %b %m %f
Occurs when the user clicks the mouse in most areas of a SpaceFM window. The
mouse button pressed is available via the substitution variable %b, any key
modifier (eg Ctrl+Click) via %m, and the window element which received the click via %f.

If a handler set for the evt_win_click event is synchronous (has an asterisk
prefix or is added with the replace-event method), and it returns a zero exit
status, the built-in handler for the event will be inhibited.

When using activate to show a popup menu from within an evt_win_click event
handler, a small delay may be needed before the menu is shown to prevent it
from closing immediately when the mouse button is released:

    *if [ "%b" != "2" ]; then exit 1; fi; ( sleep .2; spacefm socket activate "A-C" ) &

Because the sleep and spacefm command are within parentheses, they are both
backgrounded by the ampersand (&), preventing a lag in the GUI.
.P
.B evt_win_key (Window|Keypress) %e %w %p %t %k %m
Occurs when the user presses a key in most areas of a SpaceFM window. The key
code pressed is available via the substitution variable %k, and any key
modifier (eg Ctrl+C) via %m.

If a handler set for the evt_win_key event is synchronous (has an asterisk
prefix or is added with the replace-event method), and it returns a zero exit
status, the built-in handler for the event will be inhibited (SpaceFM will not
react to the keypress in most cases, even if it is assigned to a menu item).
.P
.B evt_win_close (Window|Close) %e %w %p %t
Occurs whenever a SpaceFM window is closed, including the last window of the instance.
.P
.B evt_pnl_focus (Panel|Focus) %e %w %p %t
Occurs whenever a panel gets focus. Any handler command for this event will
be run whenever a user clicks in the panel, even if the panel is not
changed. The command will also be run if the user switches focus to another panel.
.P
.B evt_pnl_show (Panel|Show) %e %w %p %t %f %v
Occurs whenever a panel or panel element is shown or hidden. The element
shown or hidden is available via the substitution
variable %f (panelN|filelist|devices|bookmarks|dirtree|pathbar), and the
element's visibility (shown or hidden) is available via %v (1=shown or 0=hidden).
.P
.B evt_pnl_sel (Panel|Select) %e %w %p %t
Occurs whenever the file selection in a panel changes.

If a handler set for the evt_pnl_sel event is synchronous (has an asterisk
prefix or is added with the replace-event method), and it returns a zero exit
status, the built-in handler for the event will be inhibited. (The built-in
handler for evt_pnl_sel updates the contents of the panel's status bar, so
if you want to handle this yourself, you can inhibit it.)
.P
.B evt_tab_new (Tab|New) %e %w %p %t
Occurs whenever a new tab is added to a panel, including initial tabs when
the window is opened or the panel is first shown.
.P
.B evt_tab_chdir (Tab|Change Dir) %e %w %p %t %d
Occurs whenever a tab changes directory, such as when a new tab opens, or
the user navigates to a different directory. %d will be replaced with the
quoted new directory of the tab.
.P
.B evt_tab_focus (Tab|Focus) %e %w %p %t
Occurs whenever a tab gets focus within a panel. For example, changing tabs
will trigger this event. However, merely switching panels will trigger the
evt_pnl_focus event, but not evt_tab_focus.
.P
.B evt_tab_close (Tab|Close) %e %w %p %t
Occurs whenever a tab is closed. The tab number which was closed is available
via the substitution variable %t, and its panel via %p. (Note that closing a
tab changes panel focus to the panel containing the tab being closed.)

Note that exported bash variables cannot be used in the handler commands
for evt_tab_close.
.P
.B evt_device (Device) %e %f %v
Occurs whenever a device is added, removed, or otherwise changes
state (mounted, unmounted, media inserted, etc). The device file is
available via the substitution variable %f, and the change
via %v (added|removed|changed).

Note that exported bash variables cannot be used in the handler commands
for evt_device.

.SH Event Manager
The Event Manager submenu, located in the main menu bar's View menu, is
used to configure static event handler commands to be run when events
occur. Each item in this menu opens a dialog in which a program name or
bash command line can be entered. The dialog for each event type also
explains when the event occurs and what event substitution variables are
available for use in the command for that event.

Socket commands are of particular use in these command lines. For example,
to alter the default text in the status bar so that it shows only the
filename of the first selected file, set Events|Panel|Select (an event
which occurs when the file selection in a panel changes) to:

    spacefm socket set statusbar_text "$fm_filename"

Any command line set in the Event Manager menu which is prefixed with
an asterisk (*) as the first character, will be run synchronously, as if
it was added with the replace-event method. (The asterisk is removed
before the command is run.) This means the GUI will freeze while SpaceFM
waits for the command to exit. For evt_win_click, evt_win_key,
and evt_pnl_sel event types, a zero exit status will also inhibit
the built-in handler.

In addition to setting commands in the Event Manager menu, you can also
add event handler commands dynamically using the add-event or
replace-event socket command methods.

.SH NOTES
These man pages are an almost verbatim copy of the html user manual

.SH SEE ALSO
.BR spacefm (1)
.br
.BR spacefm-design-menu (7)
.br
.BR spacefm-devices (7)
.br
.BR spacefm-gui (7)
.br
.BR spacefm-handlers (7)
.br
.BR spacefm-plugins (7)
.br
.BR spacefm-scripts (7)
.br
.BR spacefm-scripts-sys (7)
.br
.BR spacefm-socket (7)
.br
.BR spacefm-tasks (7)
.PP

.SH EXTERNAL RESOURCES
For full documentation and examples see the SpaceFM User's Manual
.PP
.I http://ignorantguru.github.io/spacefm/spacefm-manual-en.html#sockets
