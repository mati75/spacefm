#!/usr/bin/env python

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

import argparse
import os
import sys

from pathlib import Path

from loguru import logger

###############################

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--config-dir',
                    metavar='DIR',
                    nargs=1,
                    help='User config dir')
parser.add_argument('-f', '--config-file',
                    metavar='FILENAME',
                    nargs=1,
                    help='User config file name')
debug = parser.add_argument_group('debug')
debug.add_argument('-L', '--loglevel',
                   default='ERROR',
                   metavar='LEVEL',
                   type=str.upper,
                   choices=['NONE', 'CRITICAL', 'ERROR', 'WARNING',
                            'INFO', 'VERBOSE', 'DEBUG', 'TRACE'],
                   help='Levels: %(choices)s')
args = parser.parse_args()

logger.remove()
logger.add(sys.stdout, level=args.loglevel, colorize=True)

# logger.info(f'dir  {args.config_dir}')
# logger.info(f'file {args.config_file}')

if not args.config_dir:
    logger.error(f'Missing arg --config-dir')
    raise SystemExit(1)
if not args.config_file:
    logger.error(f'Missing arg --config-file')
    raise SystemExit(1)

config_dir: Path = Path(args.config_dir[0])
config_file: Path = Path(args.config_file[0])

session_path: Path = Path(config_dir / config_file)
session_bak_path: Path = Path(config_dir / f'{config_file}-old')

if not config_dir.exists():
    config_dir.mkdir(parents=True, exist_ok=True)

os.chdir(config_dir)

if not config_file.exists() and not session_bak_path.exists():
    raise SystemExit

if config_file.exists():
    if session_bak_path.exists():
        session_bak_path.unlink()
    session_bak_path.write_text(config_file.read_text())
else:
    if not session_bak_path.exists():
        raise SystemExit
    config_file.write_text(session_bak_path.read_text())
